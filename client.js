// Generated by CoffeeScript 1.9.1
(function() {
  var HEIGHT, INFOTEXT, MAX_RESULTS, WIDTH, activeResults, addResult, cooldown, infoDiv, queryURL, queryWords, removeResult, results, showResult, startRecognition, textarea, texts, tried;

  textarea = document.querySelector('textarea');

  texts = [];

  startRecognition = function() {
    var recognition;
    recognition = new (window.webkitSpeechRecognition || window.mozSpeechRecognition || window.SpeechRecognition);
    window.recognition = recognition;
    recognition.continuous = true;
    recognition.onresult = function(ev) {
      var result;
      console.log("Recognition result", ev);
      texts[texts.length - 1] = ((function() {
        var j, len, ref, results1;
        ref = ev.results;
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          result = ref[j];
          results1.push(result[0].transcript.toLowerCase());
        }
        return results1;
      })()).join('');
      textarea.innerHTML = texts.join(' ');
      return queryWords();
    };
    recognition.onstart = function() {
      console.log("Recognition started");
      return texts.push("");
    };
    recognition.onend = function() {
      console.log("Recognition ended");
      return recognition.start();
    };
    return recognition.start();
  };

  WIDTH = 640;

  HEIGHT = 480;

  MAX_RESULTS = 20;

  activeResults = [];

  results = {};

  tried = {};

  queryURL = function(query) {
    query = escape(query.trim().replace(/ /g, '+'));
    return "https://en.wikipedia.org/w/api.php?action=query&format=json&generator=search&gsrsearch=" + query + "&gsrlimit=1&redirects=true&prop=extracts|pageimages&exintro=true&piprop=thumbnail|original&pithumbsize=640&continue=";
  };

  addResult = function(query) {
    tried[query] = true;
    return JSONP(queryURL(query), function(json) {
      var k, ref, ref1, result, v;
      if (!(json != null ? (ref = json.query) != null ? ref.pages : void 0 : void 0)) {
        return;
      }
      ref1 = json.query.pages;
      for (k in ref1) {
        v = ref1[k];
        result = v;
      }
      results[query] = showResult(result);
      activeResults.push(query);
      if (activeResults.length > MAX_RESULTS) {
        return removeResult(activeResults.shift());
      }
    });
  };

  showResult = function(result) {
    var div;
    div = document.createElement('div');
    div.className = "result";
    div.innerHTML = result.extract;
    div.style.width = WIDTH + 'px';
    div.style.maxHeight = HEIGHT + 'px';
    if (result.thumbnail) {
      div.style.background = "linear-gradient(rgba(255, 255, 255, 0.4),rgba(255, 255, 255, 0.4)),\nurl(" + result.thumbnail.source + "),\nlinear-gradient(rgba(255, 255, 255, 1),rgba(255, 255, 255, 1))";
      if (result.thumbnail.width >= WIDTH || result.thumbnail.height >= HEIGHT) {
        div.style.width = result.thumbnail.width + 'px';
        div.style.height = result.thumbnail.height + 'px';
      }
    }
    div.style.top = Math.round(Math.random() * (window.innerHeight - parseInt(div.style.maxHeight, 10))) + 'px';
    div.style.left = Math.round(Math.random() * (window.innerWidth - parseInt(div.style.width, 10))) + 'px';
    document.body.appendChild(div);
    return div;
  };

  removeResult = function(query) {
    var result;
    if (!(result = results[query])) {
      return;
    }
    document.body.removeChild(results[query]);
    return delete results[query];
  };

  INFOTEXT = "\n<p><b>Contextable</b> listens to your speech and gives you a live-updating\ndisplay of relevant articles from <a href='http://en.wikipedia.org/'>Wikipedia</a>.\nIt uses the <a href='http://updates.html5rocks.com/2013/01/Voice-Driven-Web-Apps-Introduction-to-the-Web-Speech-API'>Web Speech API</a>,\nso be warned that it only works in Chrome at the moment, and that voice data will hit Google's voice recognition servers for analysis.\n<div class=\"loading\">Loading word filter, please be patient...</div>";

  infoDiv = showResult({
    extract: INFOTEXT
  });

  fetch('1mil4titlesnostop.bloom').then(function(response) {
    return response.arrayBuffer();
  }).then(function(buffer) {
    var ary, bloom, j, ref, view, x;
    window.buffer = buffer;
    view = new DataView(buffer);
    window.view = view;
    ary = new Int32Array(buffer.byteLength / 4);
    window.ary = ary;
    for (x = j = 0, ref = ary.length - 1; 0 <= ref ? j <= ref : j >= ref; x = 0 <= ref ? ++j : --j) {
      ary[x] = view.getInt32(x * 4, true);
    }
    bloom = new BloomFilter(ary, 7);
    window.bloom = bloom;
    infoDiv.querySelector('.loading').remove();
    return queryWords();
  });

  cooldown = null;

  queryWords = function() {
    var current, i, j, n, phrase, ref;
    if (!texts.length) {
      return;
    }
    if (cooldown) {
      return;
    }
    i = 0;
    current = texts[texts.length - 1].split(' ');
    while (i < current.length) {
      console.log("testing next", Math.min(4, current.length - i), "words");
      for (n = j = ref = Math.min(4, current.length - i); j >= 1; n = j += -1) {
        phrase = current.slice(i, +(i + n - 1) + 1 || 9e9).join(' ');
        console.log("trying", phrase);
        if (bloom.test(phrase)) {
          console.log("found", phrase);
          if (tried[phrase]) {
            break;
          } else {
            cooldown = setTimeout((function() {
              cooldown = null;
              return queryWords();
            }), 5000);
            return addResult(phrase);
          }
        }
      }
      console.log("moving forward by", Math.max(n, 1));
      i += Math.max(n, 1);
    }
  };

  startRecognition();

}).call(this);
